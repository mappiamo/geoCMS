#mappiamo - EN
=============

This is the #mappiamo Ensglish documentation.

Introduction
------------

`#mappiamo <http://www.mappiamo.org/>`_ is a CMS that allows you to create and leverage content through the use of OpenData, the geo-location and microformats. It can be used for processing the data produced by public administrations, collecting content (crowdsourcing), civic hacking and providing a basis for the portal of a smart city.

Installation
------------

Download #mappiamo package from GIT, and copy all files to your web host by FTP. Copy files to subdirectory if required, or to public_html root. Login to your control panel or phpMyadmin to create database user with password and add database to user. Give all access rights to your database user. When you copied all files to your host, access to the #mappiamo root by your browser by http. Setup process will be started. Fill all required fields. If the process done without error, you can access to the content manager on the URL: http://[your_host]/manager/

Using content manager
=====================

Create new content as admin or editor
-------------------------------------

You can create several types of content.

1) Post: this is a simple text based blog content (with marker on the map if required)
2) Place: content for the place selected on the map
3) Event: event is like the place, but you can define start and end dates on extra fields
4) Route: this content contains longer route on the map for long distance travels between cities

All content types can create marker on the map and can be used draw-on-the-map functions, excluding route. Route can contains only route plan.

About semantic web
------------------

The Semantic Web is an extension of the Web through standards by the World Wide Web Consortium (W3C). The standards promote common data formats and exchange protocols on the Web, most fundamentally the Resource Description Framework (RDF).

According to the W3C, "The Semantic Web provides a common framework that allows data to be shared and reused across application, enterprise, and community boundaries". The term was coined by Tim Berners-Lee for a web of data that can be processed by machines. While its critics have questioned its feasibility, proponents argue that applications in industry, biology and human sciences research have already proven the validity of the original concept. (wikipedia)

.. note:: Mappiamo automatically support semantic web for better result on google searches by content and meta data. The standard semantic data generated automatically by the content module.

Create automatic meta data by form
----------------------------------

Semantic data generated by meta data and content. The content editor or administrator can insert metadata when modify saved content step-by-step, but metadata generator form is available on the frame "Use meta data wizzard" on "Meta" tab. Editor can select form theme, and the selected form can be filled and savaed. These forms are folows the standard rules of semantic web data.

.. note:: Always read the rules before fill the metadata generator form. For example, if the content meta assigned to organization, the instrictions can be found here: https://schema.org/Organization. Currently we offer four pre-generated form for automatic metadata creation.

Insert contents to category
--------------------------

Create category, and group several types of content to selected category. The selected category will group contents and markers on the map if required. The groped contents can be listed on one page, and the content markers will be displayed at one time on the map.

Create pages
------------

Create content type "pages" if you want to display the collection of content by menu. Pages can contains category (with any contents), one content, module generated service or page, and events with date filter on the top of page.

.. note:: If you choose "Add event" when adding page content, you will found a new dialog with several parameters, not only the content selection list. Here you can insert more than one events groupped by categories, and you can setup the sort order and filter functions for this page by input fields. Only this one type of page, the users can re-define event filter if enebled on the top.

Create custom menus
-------------------

Create menu with name on the content manager. When menu named and created, use it on "Page". Select manager's menu "Page", click on previously created page-content (with document, category, modul or events) and insert selected page content to any menu. Select more than one times and add if required.

.. note:: Very important, that the created menu must be inserted to the template of content type by name or menu ID.

Widgets on your template
========================

You can insert several widgets to your own #mappiamo template. You have to edit tamplete files only with your favorite IDE / text editor. Widgets are the part of ducument front-end with several functions. Some of them can be inserted to the content, some of then can be inserted to the sidebar on left or right.

.. note:: If the widger name contains word "Box", the widget primary created for the sidebar, not the column of main content. but because the template can be modified with several tricks, these widget can be used under or within the main content text.

.. note:: New widgets required new CSS classes for correct display. Check the HTML source code to get widget's class names.

Address
-------

- Usage code example::

    <?php M_Template::widget('address'); ?>

This widget have no parameters, creating search box for map, the widget centering map for the search address.
The search string must be real name (for example city name) to get real latitude and longitude.

.. note:: This widget is the part of Leaflet panel widget, this widger required to show address search function.

Bottom menu
-----------

- Usage code example::

    <?php M_Template::widget('bottommenu', array($ID)); ?>

Display bottom menu items. This widget have 1 parameter, the menu ID.

.. note:: Menu must be created by manager, you can insert any menu of them by ID.

Allmeta box
-----------

- Usage code example::

    <?php $this->widget('box_allmeta'); ?>

This widget have no parameters, creating list (table) of all meta data of content.
This widget is ideal for right column, but van be used unser the main content. The disabled meta names is on the row 13 on the code.

Box
---

- Usage code example::

    <?php M_Template::widget('box', array($image, $title, $desc, $link)); ?>

This widget display image box, using four parameters.

1) $image -> image path
2) $title -> title text on image (positioned by customizable CSS!)
3) $desc -> description of image (positioned by customizable CSS!)
4) $link -> link if user click on the image

Collabrators box
----------------

- Usage code example::

    <?php $this->widget('box_collabrators' array(n)); ?>

This widget have one parameters "n", what is the maximum number of collabotators article based on the selected content. The collaborator's e-mail must be saved to the meta value with name "collaborator".

.. note:: This widget have no parameter about collaborators name ir e-mail, because these names depending on the document. This is the reason why the collaborator's identifier definied by meta data of selected document not by the template.

Cookie box
----------

- Usage code example::

    <?PHP $this->widget('box_cookie'); ?>

This widget have no parameters, creating alert box for cookie usage.

Distance box
------------

- Usage code example::

    <?PHP $this->widget('box_distance'); ?>

This widget have no parameters, creating list (table) of related articles not far from the current content.

.. note:: The distance is fixed on code, the radius is 1 km.

Events box
----------

- Usage code example::

    <?PHP $this->widget('box_events'); ?>

This widget have no parameters, creating list (table) of events not far from the current content.

.. note:: The distance is fixed on code, the radius is 1 km.

Instagram box
-------------

- Usage code example::

    <?PHP $this->widget('box_instagram', NULL); ?>

This widget have one parameter what is the hashtag for images.
If this parameter missing or NULL, the default hashtag is 'tourism'.
With meta name 'hashtag-instagram' can be overwite the deafult hashtag to anything else.

.. note:: If you use meta to define instagram hashtag instead of template, you can get images several hashtags on all documents where 'hashtag-instagram' have value.

Onemeta box
-----------

- Usage code example::

    <?PHP $this->widget('box_onemeta', '[meta_name]'); ?>

This widget have one parameter what is the meta name to get the value of only oane meta data.

.. note:: This widget can be used on the column of main content.

Youtube box
-----------

- Usage code example::

    <?php $this->widget('box_youtube', array('[developer key]', '[channel id]', [maximum content])); ?>

This widget have 3 parameters. Developer key, youtube channel id, and the maximum number of youtube content.

.. note:: This widget can be inserted to the left or right sidebar column, and creating scrollable carousel of selected channel content.

Allmeta
-------

- Usage code example::

    <?PHP $this->widget('content_allmeta'); ?>

This widget have no parameters, creating list (table) of meta data from the current content.

.. note:: This widget created for list or table of standard schemantic data if available.

Slideshow
---------

- Usage code example::

    <?PHP $this->widget('content_slideshow'); ?>

This widget have no parameters, creating slideshow on the content column from all images included to the current content.

.. note:: If more than one images inserted to the content, the widget will be show the gallery where you insert. The best place is under the content column.

Divided menu
------------

- Usage code example::

    <?php M_Template::widget('dividedmenu', array($ID)); ?>

Display divided menu. This widget have 1 parameter, the menu ID.

Dropdown menu
-------------

- Usage code example::

    <?php M_Template::widget('dropdownmenu', array($ID)); ?>

Display dropdown menu. This widget have 1 parameter, the menu ID.

Intro
-----

- Usage code example::

    <?PHP $this->widget('intro'); ?>

This widget have no parameters, display intro image.

Headline
--------

- Usage code example::

    <?PHP $this->widget('content_headline'); ?>

This widget have no parameters, creating group of some data and metadata which are rewired on content column between title and content text.

Flickr
------

- Usage code example::

    <?PHP $this->widget('flickr'); ?>

This widget have no parameters, creating flickr image groups on the map by visible box of map.

Form contact
------------

- Usage code example::

    <?PHP $this->widget('form_contact', array('[registered username]')); ?>

This widget have one parameter, the parameter must be the username of registered Mappiamo user. This widget creating form with input fields for sending simple message with ajax validation.

Gravatar
--------

This widget included to the content module, cannot use on the template or MVC view.
The widget fetching gravatar icon by the content creator's e-mail address, if the editor registered on this service.

Jplayer
-------

- Usage code example::

    <?PHP $this->widget('jplayer'); ?>

This widget have no parameters, creating javascript player for audio (or video) content.
The required meta name is 'audio' and the meta value must be the full url of audio or video file.

.. note:: The meta data value is the full URL of audio file, but the correct encoding is very important. Plase refer to the officiel JPlayer page to inform about usable audio formats.

Map
---

- Usage code example::

    <?PHP $this->widget('map' array($zoom)); ?>

This widget have 1 parameter, the default zoom. This widget display map anywhere on the content page. This widget display map (with markers, draw or route) on the visitor's interface.

Menu
----

- Usage code example::

    <?PHP $this->widget('menu' array($ID)); ?>

This widget have 1 parameter, the menu id. This widget display menu item.

Video box
---------

- Usage code example::

    <?PHP $this->widget('videobox'); ?>

This widget have no parameters, creating embedd iframe player for youtube content by full url. The required meta name is 'videobox' and the meta value must be the full url of youtube video.

Lastcontent
-----------

- Usage code examples::

    <?php $this->widget('lastcontent', array(5)); ?>
    <?php $this->widget('lastcontent', array(5, 'event', 'start', 'from_now')); ?>
    <?php $this->widget('lastcontent', array(5, 'post', 'created')); ?>

This widget have parameters. The first is the maximum number of content, this is required.

All other paramteres are optional (not required because default values are available): [content type], [ordering column name], and if the content type is 'event', the last parameter 'from_now' shows only current and future events.

Full featured menu
------------------

- Usage code example::

    <?php M_Template::widget('menu_full', array('[category name]', '[treemenu|popmenu]', '09', 'check')); ?>

This widget have parameters. Creating custom menu system by Mappiamo "pages" and "menus", and display selected categories on the map.

- Parameters:
1) The category name
2) Menu type: 'treemenu' or 'popmenu'
3) Template number of menu only. Menus have 15 templates, the menu template number can be 1 to 15.
4) How menu display the selected catorgory contents:

- 'link' - the category opens new page with content list
- 'check' - the category displays as marker on the map

Owl image
---------

- Usage code example::

    <?PHP $this->widget('owl_image', array('category', 4, 60)); ?>
    <?PHP $this->widget('owl_image', array('path', 6, 'templates/soccorso/images/partners', 'index.php?module=category&object=59')); ?>

This widget have parameters, creating image carousel to the main content column.
The source images can get from two different source: 'category' or 'path'. This is the first parameter.

If the image source is 'path', the 3rd parameter must be the relative path to the directory contains images.

If the image source is 'category', the 3rd parameter must be the id number of category where the widget reads all images from content. This category must be created and filled with grouop of contents.

The 2nd parameter is the maximum number of items to show.

The 4th parameter is the link to open when user click on image. This is optional. If the source is 'category', the link will open the document contains clicked image.

Owl video
---------

- Usage code example::

    $TubeID = array('jkovdYV0qm0', 'dw6wZQkfsn0', 'CqdSzVXkhmY', 'km3JiaPqWMI', 'NyCwOdyhZco', 'YJTxnhjpF3U', 'HOVYTZkvjH8', '2Tlou1Vdg6Y', '0_rtwI_nUlI', 'LCtp7D0uCjA');
    $this->widget('owl_video', array($TubeID, 3));

This widget have parameters, creating video carousel to the main content column.
The first parameter must be an array on the separated variable, contains all youtube video id required for the carousel.

The second parameter is how many videos display at once by the scrollable carousel.

Share
-----

- Usage code example::

    <?PHP $this->widget('share', array($site_id)); ?>

Share content on social networks.

Slider
------

- Usage code example::

    <?PHP $this->widget('slider', array($content_id)); ?>

This widget creating image slider from the content by content ID.

Weather
-------

- Usage code example::

    <?PHP $this->widget('weather'); ?>

This widget have no parameters, creating weather report on the map.

Disqus
------

- Usage code example::

    $Types = array('post', 'event');
    <?php M_Template::widget('disqus', array($Types)); ?>

This widget have parameter as array named $Types. Creating comment section on content page. Disqus account and disqus site name required. On the parameter '$Types' must be listed all content types (post, event, place, route) where the disqus comment service will be available. Insert this widget under the main content page.

.. note:: You must register your installed #mappiamo on the Disqus service page as site administrator to get your unique Disqus site name. If you have this name, you must define it on the manager -> preferences.